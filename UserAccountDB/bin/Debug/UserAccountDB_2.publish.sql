/*
Deployment script for UserAccountDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "UserAccountDB"
:setvar DefaultFilePrefix "UserAccountDB"
:setvar DefaultDataPath "C:\Users\Zaeee\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Zaeee\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[AccountInfo].[Id] is being dropped, data loss could occur.

The column [dbo].[AccountInfo].[Password] on table [dbo].[AccountInfo] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[AccountInfo])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key d50ea4ec-9c06-4bba-bc69-9e40c00c5d89 is skipped, element [dbo].[UserStatus].[Id] (SqlSimpleColumn) will not be renamed to StatusId';


GO
PRINT N'Starting rebuilding table [dbo].[AccountInfo]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AccountInfo] (
    [UserId]    INT           IDENTITY (1, 1) NOT NULL,
    [Username]  NVARCHAR (50) NOT NULL,
    [Password]  NVARCHAR (20) NOT NULL,
    [Email]     NVARCHAR (50) NOT NULL,
    [FirstName] NVARCHAR (50) NOT NULL,
    [LastName]  NVARCHAR (50) NOT NULL,
    [Street]    NVARCHAR (50) NOT NULL,
    [State]     NVARCHAR (50) NOT NULL,
    [City]      NVARCHAR (50) NOT NULL,
    [ZipCode]   INT           NOT NULL,
    [Birthday]  NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AccountInfo])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AccountInfo] ON;
        INSERT INTO [dbo].[tmp_ms_xx_AccountInfo] ([UserId], [Username], [Email], [FirstName], [LastName], [Street], [State], [City], [ZipCode], [Birthday])
        SELECT   [UserId],
                 [Username],
                 [Email],
                 [FirstName],
                 [LastName],
                 [Street],
                 [State],
                 [City],
                 [ZipCode],
                 [Birthday]
        FROM     [dbo].[AccountInfo]
        ORDER BY [UserId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AccountInfo] OFF;
    END

DROP TABLE [dbo].[AccountInfo];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AccountInfo]', N'AccountInfo';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[UserStatus]...';


GO
CREATE TABLE [dbo].[UserStatus] (
    [StatusId] INT            NOT NULL,
    [Status]   NVARCHAR (500) NOT NULL,
    [UserId]   INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[UserStatus]...';


GO
ALTER TABLE [dbo].[UserStatus] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[AccountInfo] ([UserId]);


GO
PRINT N'Creating [dbo].[Login]...';


GO
CREATE PROCEDURE [dbo].[Login]
	@Email NVARCHAR(50),
	@Password NVARCHAR(50)
AS
BEGIN
	SELECT COUNT(*) from UserRegistration where Email=@Email and Password=@Password   
end
GO
PRINT N'Creating [dbo].[spRegister]...';


GO
CREATE PROCEDURE [dbo].[spRegister]
	@Username nvarchar(50), 
	@Password nvarchar(50),
	@FirstName nvarchar(50), 
	@LastName nvarchar(50),
	@Email nvarchar(50),
	@Street nvarchar(50),
	@City nvarchar(50),
	@State nvarchar(50),
	@ZipCode int,
	@Bday nvarchar(50)
	
AS
BEGIN 
insert into dbo.AccountInfo ( Username, FirstName, LastName, Email, Street, City, State, ZipCode, Birthday)
           values ( @Username, @FirstName, @LastName, @Email, @Street, @City, @State, @ZipCode, @Bday)

	END
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd50ea4ec-9c06-4bba-bc69-9e40c00c5d89')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d50ea4ec-9c06-4bba-bc69-9e40c00c5d89')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.UserStatus'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
